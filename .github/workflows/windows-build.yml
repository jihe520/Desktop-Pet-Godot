name: "godot-ci export (Windows)"

on: 
  push:
    branches:
      - main  # 每次推送到 main 分支时触发

env:
  GODOT_VERSION: 4.3
  EXPORT_NAME: test-project
  PROJECT_PATH: test-project

jobs:
  export-windows:
    name: Windows Export
    runs-on: ubuntu-20.04
    container:
      image: barichello/godot-ci:4.3

    steps:
      # 1. 检出代码
      - name: Checkout
        uses: actions/checkout@v4
        with:
          lfs: true

      # 2. 设置 Godot 环境
      - name: Setup
        run: |
          mkdir -v -p ~/.local/share/godot/export_templates/
          mkdir -v -p ~/.config/
          mv /root/.config/godot ~/.config/godot
          mv /root/.local/share/godot/export_templates/${GODOT_VERSION}.stable ~/.local/share/godot/export_templates/${GODOT_VERSION}.stable

      # 3. 导出 Windows 平台版本
      - name: Windows Build
        run: |
          mkdir -v -p build/windows
          EXPORT_DIR="$(readlink -f build)"
          cd $PROJECT_PATH
          godot --headless --verbose --export-release "Windows Desktop" "$EXPORT_DIR/windows/$EXPORT_NAME.exe"

      # 4. 创建 GitHub Release
      - name: Create GitHub Release
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ github.run_number }}
          release_name: "Windows Build - ${{ github.run_number }}"
          draft: false  # 是否作为草稿发布
          prerelease: false  # 是否为预发布版本
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # 5. 上传构建产物到 Release
      - name: Upload Build to Release
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: build/windows/${EXPORT_NAME}.exe
          asset_name: ${EXPORT_NAME}.exe
          asset_content_type: application/octet-stream
